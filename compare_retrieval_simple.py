#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å retrieval –∏ –±–µ–∑ –Ω–µ–≥–æ
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç CLI –∫–æ–º–∞–Ω–¥—ã locobench
"""

import subprocess
import json
import sys
from pathlib import Path
from datetime import datetime


def run_evaluation(retrieval_enabled: bool):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ü–µ–Ω–∫—É —á–µ—Ä–µ–∑ CLI"""
    print(f"\n{'='*60}")
    print(f"üß™ –ó–∞–ø—É—Å–∫ –æ—Ü–µ–Ω–∫–∏ {'–°' if retrieval_enabled else '–ë–ï–ó'} retrieval")
    print(f"{'='*60}\n")
    
    # –û–±–Ω–æ–≤–∏—Ç—å config.yaml –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è retrieval
    config_path = Path("config.yaml")
    if not config_path.exists():
        print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
        return None
    
    # –ü—Ä–æ—á–∏—Ç–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    import yaml
    with open(config_path, 'r') as f:
        config = yaml.safe_load(f)
    
    # –û–±–Ω–æ–≤–∏—Ç—å retrieval –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    config['retrieval']['enabled'] = retrieval_enabled
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    backup_config = config_path.read_text()
    temp_config_path = Path("config_temp.yaml")
    with open(temp_config_path, 'w') as f:
        yaml.dump(config, f, default_flow_style=False)
    
    try:
        # –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ü–µ–Ω–∫—É
        model_name = "deepseek-ai/deepseek-coder-1.3b-instruct"
        output_suffix = "with_retrieval" if retrieval_enabled else "no_retrieval"
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file = f"evaluation_results/deepseek_comparison_{output_suffix}_{timestamp}.json"
        
        cmd = [
            sys.executable, "-m", "locobench.cli",
            "evaluate",
            "--config-path", str(temp_config_path),
            "--model", model_name,
            "--output-file", output_file,
            "--no-resume"  # –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        ]
        
        print(f"üöÄ –ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
        
        result = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            timeout=3600  # 1 —á–∞—Å —Ç–∞–π–º–∞—É—Ç
        )
        
        if result.returncode == 0:
            print("‚úÖ –û—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {output_file}")
            return output_file
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏:")
            print(result.stderr)
            return None
            
    finally:
        # –£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if temp_config_path.exists():
            temp_config_path.unlink()


def compare_results(file_without, file_with):
    """–°—Ä–∞–≤–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –¥–≤—É—Ö —Ñ–∞–π–ª–æ–≤"""
    print(f"\n{'='*60}")
    print("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print(f"{'='*60}\n")
    
    def load_results(file_path):
        if not Path(file_path).exists():
            return None
        with open(file_path, 'r') as f:
            return json.load(f)
    
    results_without = load_results(file_without)
    results_with = load_results(file_with)
    
    if not results_without:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ë–ï–ó retrieval: {file_without}")
        return
    
    if not results_with:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –° retrieval: {file_with}")
        return
    
    # –ò–∑–≤–ª–µ—á—å –º–µ—Ç—Ä–∏–∫–∏
    print("üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫:\n")
    
    # –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ - –≤—ã–≤–µ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ë–ï–ó retrieval:")
    print(f"  –§–∞–π–ª: {file_without}")
    if 'results' in results_without:
        print(f"  –ú–æ–¥–µ–ª–µ–π –æ—Ü–µ–Ω–µ–Ω–æ: {len(results_without['results'])}")
    
    print("\n–†–ï–ó–£–õ–¨–¢–ê–¢–´ –° retrieval:")
    print(f"  –§–∞–π–ª: {file_with}")
    if 'results' in results_with:
        print(f"  –ú–æ–¥–µ–ª–µ–π –æ—Ü–µ–Ω–µ–Ω–æ: {len(results_with['results'])}")
    
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    comparison_file = Path("evaluation_results") / "comparison_summary.json"
    with open(comparison_file, 'w') as f:
        json.dump({
            'timestamp': datetime.now().isoformat(),
            'without_retrieval_file': str(file_without),
            'with_retrieval_file': str(file_with),
            'without_retrieval': results_without,
            'with_retrieval': results_with
        }, f, indent=2)
    
    print(f"\n‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {comparison_file}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üî¨ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ DeepSeek —Å retrieval –∏ –±–µ–∑ –Ω–µ–≥–æ")
    print("="*60)
    
    # –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    Path("evaluation_results").mkdir(exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫ 1: –ë–ï–ó retrieval
    file_without = run_evaluation(retrieval_enabled=False)
    
    if not file_without:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ—Ü–µ–Ω–∫–∏ –ë–ï–ó retrieval")
        return
    
    # –ó–∞–ø—É—Å–∫ 2: –° retrieval
    file_with = run_evaluation(retrieval_enabled=True)
    
    if not file_with:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ—Ü–µ–Ω–∫–∏ –° retrieval")
        return
    
    # –°—Ä–∞–≤–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    compare_results(file_without, file_with)
    
    print("\n‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    try:
        import yaml
    except ImportError:
        print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PyYAML: pip install pyyaml")
        sys.exit(1)
    
    main()
