#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è DeepSeek —Å retrieval –∏ –±–µ–∑ –Ω–µ–≥–æ
"""

import json
import sys
import subprocess
from pathlib import Path
from datetime import datetime

def update_config_retrieval(enabled):
    """–û–±–Ω–æ–≤–∏—Ç—å config.yaml –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è retrieval"""
    try:
        import yaml
    except ImportError:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PyYAML: pip install pyyaml")
        return False
    
    config_path = Path("config.yaml")
    if not config_path.exists():
        print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
        return False
    
    with open(config_path, 'r') as f:
        config = yaml.safe_load(f)
    
    config['retrieval']['enabled'] = enabled
    
    with open(config_path, 'w') as f:
        yaml.dump(config, f, default_flow_style=False, allow_unicode=True)
    
    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: retrieval.enabled = {enabled}")
    return True

def run_evaluation(difficulty, retrieval_enabled, output_suffix):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ü–µ–Ω–∫—É"""
    print(f"\n{'='*60}")
    print(f"üß™ –ó–∞–ø—É—Å–∫ –æ—Ü–µ–Ω–∫–∏ {'–°' if retrieval_enabled else '–ë–ï–ó'} retrieval")
    print(f"   Difficulty: {difficulty}")
    print(f"{'='*60}\n")
    
    # –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not update_config_retrieval(retrieval_enabled):
        return None
    
    # –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    Path("evaluation_results").mkdir(exist_ok=True)
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_file = f"evaluation_results/deepseek_{output_suffix}_{timestamp}.json"
    
    cmd = [
        sys.executable, "-m", "locobench.cli",
        "evaluate",
        "--config-path", "config.yaml",
        "--model", "deepseek-ai/deepseek-coder-1.3b-instruct",
        "--task-category", "feature_implementation",
        "--difficulty", difficulty,
        "--output-file", output_file,
        "--no-resume"
    ]
    
    print(f"üöÄ –ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}\n")
    
    try:
        result = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            timeout=3600  # 1 —á–∞—Å —Ç–∞–π–º–∞—É—Ç
        )
        
        print(f"üì§ stdout:\\n{result.stdout[:500]}")
        if result.stderr:
            print(f"‚ö†Ô∏è stderr:\\n{result.stderr[:500]}")
        
        if result.returncode == 0:
            print(f"‚úÖ –û—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {output_file}")
            return output_file
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ (–∫–æ–¥: {result.returncode})")
            if result.stderr:
                print(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\\n{result.stderr}")
            return None
            
    except subprocess.TimeoutExpired:
        print("‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏ (>1 —á–∞—Å)")
        return None
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: {e}")
        return None

def compare_results(file_without, file_with):
    """–°—Ä–∞–≤–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –¥–≤—É—Ö —Ñ–∞–π–ª–æ–≤"""
    print(f"\n{'='*60}")
    print("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print(f"{'='*60}\n")
    
    def load_results(file_path):
        path = Path(file_path)
        if not path.exists():
            print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return None
        
        try:
            with open(path, 'r') as f:
                data = json.load(f)
            return data
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {file_path}: {e}")
            return None
    
    results_without = load_results(file_without)
    results_with = load_results(file_with)
    
    if not results_without and not results_with:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        return
    
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    comparison_file = Path("evaluation_results") / "comparison_summary.json"
    
    comparison_data = {
        'timestamp': datetime.now().isoformat(),
        'model': 'deepseek-ai/deepseek-coder-1.3b-instruct',
        'without_retrieval_file': str(file_without) if file_without else None,
        'with_retrieval_file': str(file_with) if file_with else None,
        'without_retrieval': results_without,
        'with_retrieval': results_with
    }
    
    with open(comparison_file, 'w') as f:
        json.dump(comparison_data, f, indent=2)
    
    print(f"‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {comparison_file}")
    
    # –í—ã–≤–µ—Å—Ç–∏ –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
    if results_without and 'results' in results_without:
        print(f"\\nüìà –ë–ï–ó retrieval:")
        print(f"  –ú–æ–¥–µ–ª–µ–π –æ—Ü–µ–Ω–µ–Ω–æ: {len(results_without.get('results', {}))}")
    
    if results_with and 'results' in results_with:
        print(f"\\nüìà –° retrieval:")
        print(f"  –ú–æ–¥–µ–ª–µ–π –æ—Ü–µ–Ω–µ–Ω–æ: {len(results_with.get('results', {}))}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("="*60)
    print("üî¨ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ DeepSeek —Å retrieval –∏ –±–µ–∑ –Ω–µ–≥–æ")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    try:
        import yaml
    except ImportError:
        print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PyYAML: pip install pyyaml")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫ 1: –ë–ï–ó retrieval (easy difficulty)
    file_without = run_evaluation("easy", False, "no_retrieval")
    
    if not file_without:
        print("\\n‚ö†Ô∏è –ó–∞–ø—É—Å–∫ –ë–ï–ó retrieval –Ω–µ —É–¥–∞–ª—Å—è. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ –≤—Ç–æ—Ä—ã–º –∑–∞–ø—É—Å–∫–æ–º...")
    
    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
    import time
    print("\\n‚è≥ –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—É—Å–∫–æ–º...")
    time.sleep(5)
    
    # –ó–∞–ø—É—Å–∫ 2: –° retrieval (hard difficulty)
    file_with = run_evaluation("hard", True, "with_retrieval")
    
    if not file_with:
        print("\\n‚ö†Ô∏è –ó–∞–ø—É—Å–∫ –° retrieval –Ω–µ —É–¥–∞–ª—Å—è.")
    
    # –°—Ä–∞–≤–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if file_without or file_with:
        compare_results(file_without, file_with)
        print("\\n‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print("\\nüìÑ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ evaluation_results/")
    else:
        print("\\n‚ùå –û–±–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π")
        print("\\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   1. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        print("   2. –î–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –º–æ–¥–µ–ª—å: deepseek-ai/deepseek-coder-1.3b-instruct")
        print("   3. –ï—Å—Ç—å –ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –≤ data/output/scenarios/")

if __name__ == "__main__":
    main()
