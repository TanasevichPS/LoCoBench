#!/usr/bin/env python3
"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è retrieval - —Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ü–µ–Ω–∫—É
"""

import json
import sys
from pathlib import Path

# –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
def create_test_scenarios():
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏"""
    scenarios_dir = Path("data/output/scenarios")
    scenarios_dir.mkdir(parents=True, exist_ok=True)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π 1: Easy difficulty
    scenario1 = {
        "id": "test_python_easy_001",
        "title": "Calculate Factorial Function",
        "description": "Implement a factorial function in Python",
        "difficulty": "easy",
        "task_category": "feature_implementation",
        "language": "python",
        "task_prompt": "Write a Python function `factorial(n)` that calculates the factorial of a number n. The function should handle edge cases (n=0, n=1) and use recursion. Return JSON format: {\"files\": {\"factorial.py\": \"...\"}}",
        "context_files": {
            "utils.py": """def calculate_sum(a, b):
    '''Calculate sum of two numbers'''
    return a + b

def calculate_product(a, b):
    '''Calculate product of two numbers'''
    return a * b"""
        },
        "metadata": {
            "project_path": "./data/generated/test_project",
            "context_length": 500
        }
    }
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π 2: Hard difficulty (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ retrieval)
    scenario2 = {
        "id": "test_python_hard_001",
        "title": "Implement Data Processing Pipeline",
        "description": "Create a data processing pipeline with multiple functions",
        "difficulty": "hard",
        "task_category": "feature_implementation",
        "language": "python",
        "task_prompt": "Implement a data processing pipeline that includes: 1) A function to read CSV files, 2) A function to filter data by condition, 3) A function to aggregate data. Return JSON format: {\"files\": {\"pipeline.py\": \"...\"}}",
        "context_files": {
            "data_utils.py": """import csv
import json

def read_json(filepath):
    '''Read JSON file'''
    with open(filepath, 'r') as f:
        return json.load(f)

def write_json(data, filepath):
    '''Write data to JSON file'''
    with open(filepath, 'w') as f:
        json.dump(data, f, indent=2)""",
            "processors.py": """class DataProcessor:
    def __init__(self):
        self.data = []
    
    def load(self, data):
        self.data = data
        return self
    
    def process(self):
        return self.data"""
        },
        "metadata": {
            "project_path": "./data/generated/test_project",
            "context_length": 1200
        }
    }
    
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏
    scenario_file1 = scenarios_dir / "test_easy_scenario.json"
    with open(scenario_file1, 'w') as f:
        json.dump(scenario1, f, indent=2)
    
    scenario_file2 = scenarios_dir / "test_hard_scenario.json"
    with open(scenario_file2, 'w') as f:
        json.dump(scenario2, f, indent=2)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ 2 —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è:")
    print(f"  üìÑ {scenario_file1}")
    print(f"  üìÑ {scenario_file2}")
    
    return [scenario_file1, scenario_file2]


def print_instructions():
    """–í—ã–≤–µ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞"""
    print("="*60)
    print("üìã –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –ó–ê–ü–£–°–ö–ê –û–¶–ï–ù–ö–ò")
    print("="*60)
    print("\n1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
    print("   pip install -r requirements.txt")
    print("\n2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –ë–ï–ó retrieval:")
    print("   locobench evaluate --model deepseek-ai/deepseek-coder-1.3b-instruct \\")
    print("     --task-category feature_implementation \\")
    print("     --difficulty easy \\")
    print("     --output-file evaluation_results/no_retrieval.json")
    print("\n3. –í–∫–ª—é—á–∏—Ç–µ retrieval –≤ config.yaml:")
    print("   retrieval:")
    print("     enabled: true")
    print("\n4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –° retrieval:")
    print("   locobench evaluate --model deepseek-ai/deepseek-coder-1.3b-instruct \\")
    print("     --task-category feature_implementation \\")
    print("     --difficulty hard \\")
    print("     --output-file evaluation_results/with_retrieval.json")
    print("\n–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:")
    print("   python3 compare_retrieval_full.py")
    print("="*60)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...")
    
    # –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    Path("data/output/scenarios").mkdir(parents=True, exist_ok=True)
    Path("evaluation_results").mkdir(exist_ok=True)
    
    # –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    scenario_files = create_test_scenarios()
    
    print("\n‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –≥–æ—Ç–æ–≤—ã!")
    print("\n" + "="*60)
    print("üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("="*60)
    
    print_instructions()
    
    # –°–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    script_content = '''#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å retrieval –∏ –±–µ–∑ –Ω–µ–≥–æ
"""

import subprocess
import sys
import json
from pathlib import Path
from datetime import datetime

def update_config_retrieval(enabled):
    """–û–±–Ω–æ–≤–∏—Ç—å config.yaml –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è retrieval"""
    import yaml
    with open("config.yaml", 'r') as f:
        config = yaml.safe_load(f)
    config['retrieval']['enabled'] = enabled
    with open("config.yaml", 'w') as f:
        yaml.dump(config, f, default_flow_style=False)

def run_evaluation(difficulty, retrieval_enabled, output_suffix):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ü–µ–Ω–∫—É"""
    update_config_retrieval(retrieval_enabled)
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_file = f"evaluation_results/deepseek_{output_suffix}_{timestamp}.json"
    
    cmd = [
        sys.executable, "-m", "locobench.cli",
        "evaluate",
        "--model", "deepseek-ai/deepseek-coder-1.3b-instruct",
        "--task-category", "feature_implementation",
        "--difficulty", difficulty,
        "--output-file", output_file,
        "--no-resume"
    ]
    
    print(f"\\nüöÄ {'–°' if retrieval_enabled else '–ë–ï–ó'} retrieval: {' '.join(cmd)}")
    
    result = subprocess.run(cmd, capture_output=True, text=True)
    
    if result.returncode == 0:
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {output_file}")
        return output_file
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞:\\n{result.stderr}")
        return None

if __name__ == "__main__":
    try:
        import yaml
    except ImportError:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PyYAML: pip install pyyaml")
        sys.exit(1)
    
    print("üî¨ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ DeepSeek —Å retrieval –∏ –±–µ–∑ –Ω–µ–≥–æ\\n")
    
    # –ë–ï–ó retrieval (easy difficulty)
    file1 = run_evaluation("easy", False, "no_retrieval")
    
    # –° retrieval (hard difficulty)
    file2 = run_evaluation("hard", True, "with_retrieval")
    
    if file1 and file2:
        print("\\n‚úÖ –û–±–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ë–ï–ó retrieval: {file1}")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –° retrieval: {file2}")
    else:
        print("\\n‚ö†Ô∏è –û–¥–∏–Ω –∏–ª–∏ –æ–±–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π")
'''
    
    script_file = Path("compare_retrieval_full.py")
    with open(script_file, 'w') as f:
        f.write(script_content)
    script_file.chmod(0o755)
    
    print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞: {script_file}")
    print(f"\nüí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
    print(f"   python3 {script_file}")


if __name__ == "__main__":
    main()
